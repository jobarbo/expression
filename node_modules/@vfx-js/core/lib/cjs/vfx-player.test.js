"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const vfx_player_1 = require("./vfx-player");
const rect_1 = require("./rect");
(0, vitest_1.describe)("parseOverflowOpts", () => {
    (0, vitest_1.test)('true => "fullscreen"', () => {
        (0, vitest_1.expect)((0, vfx_player_1.parseOverflowOpts)(true)).toStrictEqual([true, rect_1.RECT_ZERO]);
    });
    (0, vitest_1.test)("undefined => 0", () => {
        (0, vitest_1.expect)((0, vfx_player_1.parseOverflowOpts)(undefined)).toStrictEqual([
            false,
            {
                top: 0,
                right: 0,
                bottom: 0,
                left: 0,
            },
        ]);
    });
    (0, vitest_1.test)("number", () => {
        (0, vitest_1.expect)((0, vfx_player_1.parseOverflowOpts)(100)).toStrictEqual([
            false,
            {
                top: 100,
                right: 100,
                bottom: 100,
                left: 100,
            },
        ]);
    });
    (0, vitest_1.test)("number array", () => {
        (0, vitest_1.expect)((0, vfx_player_1.parseOverflowOpts)([0, 100, 200, 300])).toStrictEqual([
            false,
            {
                top: 0,
                right: 100,
                bottom: 200,
                left: 300,
            },
        ]);
    });
    (0, vitest_1.test)("object", () => {
        (0, vitest_1.expect)((0, vfx_player_1.parseOverflowOpts)({})).toStrictEqual([
            false,
            {
                top: 0,
                right: 0,
                bottom: 0,
                left: 0,
            },
        ]);
        (0, vitest_1.expect)((0, vfx_player_1.parseOverflowOpts)({ top: 100 })).toStrictEqual([
            false,
            {
                top: 100,
                right: 0,
                bottom: 0,
                left: 0,
            },
        ]);
        (0, vitest_1.expect)((0, vfx_player_1.parseOverflowOpts)({ left: 100 })).toStrictEqual([
            false,
            {
                top: 0,
                right: 0,
                bottom: 0,
                left: 100,
            },
        ]);
        (0, vitest_1.expect)((0, vfx_player_1.parseOverflowOpts)({ top: 100, left: 200 })).toStrictEqual([
            false,
            {
                top: 100,
                right: 0,
                bottom: 0,
                left: 200,
            },
        ]);
        (0, vitest_1.expect)((0, vfx_player_1.parseOverflowOpts)({ top: 100, right: 200, bottom: 300, left: 400 })).toStrictEqual([
            false,
            {
                top: 100,
                right: 200,
                bottom: 300,
                left: 400,
            },
        ]);
    });
});
(0, vitest_1.describe)("isRectInViewport", () => {
    const rect = (x, y, w, h) => {
        return {
            left: x,
            top: y,
            right: x + w,
            bottom: y + h,
        };
    };
    (0, vitest_1.test)("no overflow", () => {
        (0, vitest_1.expect)((0, vfx_player_1.isRectInViewport)(rect(0, 0, 1, 1), rect(0, 0, 1, 1))).toBe(true);
        // adjacent rects
        (0, vitest_1.expect)((0, vfx_player_1.isRectInViewport)(rect(0, 0, 1, 1), rect(-1, 0, 1, 1))).toBe(true);
        (0, vitest_1.expect)((0, vfx_player_1.isRectInViewport)(rect(0, 0, 1, 1), rect(1, 0, 1, 1))).toBe(true);
        (0, vitest_1.expect)((0, vfx_player_1.isRectInViewport)(rect(0, 0, 1, 1), rect(0, -1, 1, 1))).toBe(true);
        (0, vitest_1.expect)((0, vfx_player_1.isRectInViewport)(rect(0, 0, 1, 1), rect(0, 1, 1, 1))).toBe(true);
        // distant rects
        (0, vitest_1.expect)((0, vfx_player_1.isRectInViewport)(rect(0, 0, 1, 1), rect(-2, 0, 1, 1))).toBe(false);
        (0, vitest_1.expect)((0, vfx_player_1.isRectInViewport)(rect(0, 0, 1, 1), rect(2, 0, 1, 1))).toBe(false);
        (0, vitest_1.expect)((0, vfx_player_1.isRectInViewport)(rect(0, 0, 1, 1), rect(0, -2, 1, 1))).toBe(false);
        (0, vitest_1.expect)((0, vfx_player_1.isRectInViewport)(rect(0, 0, 1, 1), rect(0, 2, 1, 1))).toBe(false);
    });
});
//# sourceMappingURL=vfx-player.test.js.map