"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const rect_1 = require("./rect");
(0, vitest_1.describe)("createRect", () => {
    (0, vitest_1.test)("single number", () => {
        (0, vitest_1.expect)((0, rect_1.createRect)(1)).toStrictEqual({
            top: 1,
            right: 1,
            bottom: 1,
            left: 1,
        });
    });
    (0, vitest_1.test)("array", () => {
        (0, vitest_1.expect)((0, rect_1.createRect)([1, 2, 3, 4])).toStrictEqual({
            top: 1,
            right: 2,
            bottom: 3,
            left: 4,
        });
    });
    (0, vitest_1.test)("object", () => {
        (0, vitest_1.expect)((0, rect_1.createRect)({ top: 1, right: 2, bottom: 3, left: 4 })).toStrictEqual({
            top: 1,
            right: 2,
            bottom: 3,
            left: 4,
        });
    });
});
(0, vitest_1.describe)("growRect", () => {
    (0, vitest_1.test)("positive values", () => {
        const a = {
            top: 100,
            right: 200,
            bottom: 200,
            left: 100,
        };
        const b = (0, rect_1.createRect)(1);
        (0, vitest_1.expect)((0, rect_1.growRect)(a, b)).toStrictEqual({
            top: 99,
            right: 201,
            bottom: 201,
            left: 99,
        });
    });
    (0, vitest_1.test)("negative values", () => {
        const a = {
            top: 100,
            right: 200,
            bottom: 200,
            left: 100,
        };
        const b = (0, rect_1.createRect)(-1);
        (0, vitest_1.expect)((0, rect_1.growRect)(a, b)).toStrictEqual({
            top: 101,
            right: 199,
            bottom: 199,
            left: 101,
        });
    });
});
(0, vitest_1.describe)("shrinkRect", () => {
    (0, vitest_1.test)("positive values", () => {
        const a = {
            top: 100,
            right: 200,
            bottom: 200,
            left: 100,
        };
        const b = (0, rect_1.createRect)(1);
        (0, vitest_1.expect)((0, rect_1.shrinkRect)(a, b)).toStrictEqual({
            top: 101,
            right: 199,
            bottom: 199,
            left: 101,
        });
    });
    (0, vitest_1.test)("negative values", () => {
        const a = {
            top: 100,
            right: 200,
            bottom: 200,
            left: 100,
        };
        const b = (0, rect_1.createRect)(-1);
        (0, vitest_1.expect)((0, rect_1.shrinkRect)(a, b)).toStrictEqual({
            top: 99,
            right: 201,
            bottom: 201,
            left: 99,
        });
    });
});
(0, vitest_1.describe)("getIntersection", () => {
    (0, vitest_1.test)("no intersection", () => {
        const a = (0, rect_1.createRect)([0, 1, 1, 0]);
        const b = (0, rect_1.createRect)([0, 2, 1, 1]);
        (0, vitest_1.expect)((0, rect_1.getIntersection)(a, b)).toBe(0);
    });
    (0, vitest_1.test)("full intersection", () => {
        (0, vitest_1.expect)((0, rect_1.getIntersection)((0, rect_1.createRect)([0, 1, 1, 0]), (0, rect_1.createRect)([0, 1, 1, 0]))).toBe(1);
        (0, vitest_1.expect)((0, rect_1.getIntersection)((0, rect_1.createRect)([0, 10, 10, 1]), (0, rect_1.createRect)([1, 2, 2, 1]))).toBe(1);
    });
    (0, vitest_1.test)("partial intersection", () => {
        (0, vitest_1.expect)((0, rect_1.getIntersection)((0, rect_1.createRect)([0, 2, 1, 0]), (0, rect_1.createRect)([0, 1, 1, 0]))).toBe(1); // target is fully covered by container
        (0, vitest_1.expect)((0, rect_1.getIntersection)((0, rect_1.createRect)([0, 1, 1, 0]), (0, rect_1.createRect)([0, 2, 1, 0]))).toBe(0.5); // 50% of target is covered by container
        (0, vitest_1.expect)((0, rect_1.getIntersection)((0, rect_1.createRect)([1, 2, 2, 1]), (0, rect_1.createRect)([0, 2, 2, 0]))).toBe(0.25); // 25%
    });
});
//# sourceMappingURL=rect.test.js.map