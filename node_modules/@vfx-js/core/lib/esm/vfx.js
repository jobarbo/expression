var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _VFX_instances, _VFX_player, _VFX_canvas, _VFX_addImage, _VFX_addVideo, _VFX_addCanvas, _VFX_addText;
import { VFXPlayer } from "./vfx-player.js";
const canvasStyle = {
    position: "fixed",
    top: 0,
    left: 0,
    width: "100vw",
    height: "100vh",
    "z-index": 9999,
    "pointer-events": "none",
};
/**
 * The main interface of VFX-JS.
 */
export class VFX {
    /**
     * Creates VFX instance and start playing immediately.
     */
    constructor(opts = {}) {
        _VFX_instances.add(this);
        _VFX_player.set(this, void 0);
        _VFX_canvas.set(this, void 0);
        const canvas = document.createElement("canvas");
        for (const [k, v] of Object.entries(canvasStyle)) {
            canvas.style.setProperty(k, v.toString());
        }
        if (opts.zIndex !== undefined) {
            canvas.style.setProperty("z-index", opts.zIndex.toString());
        }
        document.body.appendChild(canvas);
        __classPrivateFieldSet(this, _VFX_canvas, canvas, "f");
        __classPrivateFieldSet(this, _VFX_player, new VFXPlayer(canvas, opts.pixelRatio), "f");
        __classPrivateFieldGet(this, _VFX_player, "f").play();
    }
    /**
     * Register an element to track the position and render visual effects in the area.
     */
    add(element, opts) {
        if (element instanceof HTMLImageElement) {
            __classPrivateFieldGet(this, _VFX_instances, "m", _VFX_addImage).call(this, element, opts);
        }
        else if (element instanceof HTMLVideoElement) {
            __classPrivateFieldGet(this, _VFX_instances, "m", _VFX_addVideo).call(this, element, opts);
        }
        else if (element instanceof HTMLCanvasElement) {
            __classPrivateFieldGet(this, _VFX_instances, "m", _VFX_addCanvas).call(this, element, opts);
        }
        else {
            __classPrivateFieldGet(this, _VFX_instances, "m", _VFX_addText).call(this, element, opts);
        }
    }
    /**
     * Remove the element from VFX and stop rendering the shader.
     */
    remove(element) {
        __classPrivateFieldGet(this, _VFX_player, "f").removeElement(element);
    }
    /**
     * Update the texture for the given element.
     *
     * If the element is an HTMLImageElemnt or HTMLVideoElement, VFX-JS does nothing.
     * Otherwise, VFX-JS captures a new snapshot of the DOM tree under the elemnt and udpate the WebGL texture with it.
     *
     * This is useful to apply effects to eleents whose contents change dynamically (e.g. input, textare etc).
     */
    update(element) {
        return __awaiter(this, void 0, void 0, function* () {
            if (element instanceof HTMLCanvasElement) {
                __classPrivateFieldGet(this, _VFX_player, "f").updateCanvasElement(element);
                return;
            }
            else {
                return __classPrivateFieldGet(this, _VFX_player, "f").updateTextElement(element);
            }
        });
    }
    /**
     * Start rendering VFX.
     */
    play() {
        __classPrivateFieldGet(this, _VFX_player, "f").play();
    }
    /**
     * Stop rendering VFX.
     * You can restart rendering by calling `VFX.play()` later.
     */
    stop() {
        __classPrivateFieldGet(this, _VFX_player, "f").stop();
    }
    /**
     * Destroy VFX and stop rendering.
     */
    destroy() {
        __classPrivateFieldGet(this, _VFX_player, "f").destroy();
        __classPrivateFieldGet(this, _VFX_canvas, "f").remove();
    }
}
_VFX_player = new WeakMap(), _VFX_canvas = new WeakMap(), _VFX_instances = new WeakSet(), _VFX_addImage = function _VFX_addImage(element, opts) {
    if (element.complete) {
        __classPrivateFieldGet(this, _VFX_player, "f").addElement(element, opts);
    }
    else {
        element.addEventListener("load", () => {
            __classPrivateFieldGet(this, _VFX_player, "f").addElement(element, opts);
        }, { once: true });
    }
}, _VFX_addVideo = function _VFX_addVideo(element, opts) {
    if (element.readyState >= 3) {
        __classPrivateFieldGet(this, _VFX_player, "f").addElement(element, opts);
    }
    else {
        element.addEventListener("canplay", () => {
            __classPrivateFieldGet(this, _VFX_player, "f").addElement(element, opts);
        }, { once: true });
    }
}, _VFX_addCanvas = function _VFX_addCanvas(element, opts) {
    __classPrivateFieldGet(this, _VFX_player, "f").addElement(element, opts);
}, _VFX_addText = function _VFX_addText(element, opts) {
    __classPrivateFieldGet(this, _VFX_player, "f").addElement(element, opts);
};
//# sourceMappingURL=vfx.js.map